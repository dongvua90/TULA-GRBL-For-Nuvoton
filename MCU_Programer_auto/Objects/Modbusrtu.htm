<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Modbusrtu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Modbusrtu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Aug 20 10:17:21 2024
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[24]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1a]">CAN0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1b]">CAN1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[24]">Default_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from interrupt.o(.text.GPCDEF_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[21]">I2S_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[20]">PDMA_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1e]">PS2_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[22]">PWRWU_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1c]">SC012_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_nuc100series.o(.text.SystemInit) referenced from startup_nuc100series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from interrupt.o(.text.TMR0_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from interrupt.o(.text.TMR1_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from interrupt.o(.text.TMR2_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from interrupt.o(.text.TMR3_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from interrupt.o(.text.UART02_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1d]">USBD_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc100series.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[75]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[76]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[77]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[78]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[79]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Z
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Y
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_X
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2c]"></a>CLK_EnablePLL</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[6d]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[32]"></a>CLK_SetCoreClock</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[33]"></a>CLK_SetHCLK</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[6e]"></a>CLK_SetModuleClock</STRONG> (Thumb, 280 bytes, Stack size 44 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[2d]"></a>CLK_WaitClockReady</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[35]"></a>Calib_xyzr</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, control.o(.text.Calib_xyzr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Calib_xyzr &rArr; PUL_R2 &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause_all
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_R2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_R1
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Z
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Y
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_X
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[65]"></a>CheckPetitModbusBufferComplete</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, petitmodbus.o(.text.CheckPetitModbusBufferComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckPetitModbusBufferComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_RxRTU
</UL>

<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, interrupt.o(.text.GPCDEF_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPCDEF_IRQHandler &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO_EnableInt</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, gpio.o(.text.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KEY
</UL>

<P><STRONG><a name="[46]"></a>GPIO_SetMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_axits
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KEY
</UL>

<P><STRONG><a name="[3d]"></a>HandleMPetitodbusWriteMultipleRegisters</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, petitmodbus.o(.text.HandleMPetitodbusWriteMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleMPetitodbusWriteMultipleRegisters &rArr; HandlePetitModbusError &rArr; PetitSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusError
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[3e]"></a>HandlePetitModbusError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, petitmodbus.o(.text.HandlePetitModbusError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HandlePetitModbusError &rArr; PetitSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMPetitodbusWriteMultipleRegisters
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusWriteSingleRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusReadHoldingRegisters
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[40]"></a>HandlePetitModbusReadHoldingRegisters</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, petitmodbus.o(.text.HandlePetitModbusReadHoldingRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HandlePetitModbusReadHoldingRegisters &rArr; HandlePetitModbusError &rArr; PetitSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusError
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[41]"></a>HandlePetitModbusWriteSingleRegister</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, petitmodbus.o(.text.HandlePetitModbusWriteSingleRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HandlePetitModbusWriteSingleRegister &rArr; HandlePetitModbusError &rArr; PetitSendMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusError
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[42]"></a>InitPetitModbus</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, petitmodbus.o(.text.InitPetitModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = InitPetitModbus &rArr; PetitModBus_UART_Initialise &rArr; Init_UART0 &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_TIMER_Initialise
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_UART_Initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>Init_KEY</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, init.o(.text.Init_KEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Init_KEY &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableInt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>Init_Timer0</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, init.o(.text.Init_Timer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_Timer0 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_TIMER_Initialise
</UL>

<P><STRONG><a name="[4e]"></a>Init_Timer1</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init.o(.text.Init_Timer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_Timer1 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_axits
</UL>

<P><STRONG><a name="[4f]"></a>Init_Timer2</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init.o(.text.Init_Timer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_Timer2 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_axits
</UL>

<P><STRONG><a name="[50]"></a>Init_Timer3</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init.o(.text.Init_Timer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_Timer3 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_axits
</UL>

<P><STRONG><a name="[51]"></a>Init_UART0</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(.text.Init_UART0))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Init_UART0 &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_UART_Initialise
</UL>

<P><STRONG><a name="[53]"></a>Init_axits</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, control.o(.text.Init_axits))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Init_axits &rArr; Init_Timer3 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer3
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>Move_X</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, control.o(.text.Move_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Move_X &rArr; PUL_X &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_X
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[56]"></a>Move_Y</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, control.o(.text.Move_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Move_Y &rArr; PUL_Y &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Y
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[57]"></a>Move_Z</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, control.o(.text.Move_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Move_Z &rArr; PUL_Z &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Z
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[58]"></a>ORGIN</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, control.o(.text.ORGIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ORGIN &rArr; PUL_Z &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause_all
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Z
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Y
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_X
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETUP_SYSTEM
</UL>

<P><STRONG><a name="[5c]"></a>PC_SW</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, pc.o(.text.PC_SW))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = PC_SW &rArr; ProcessPetitModbus &rArr; Petit_TxRTU &rArr; Petit_DoSlaveTX &rArr; PetitModBus_UART_String &rArr; PetitModBus_UART_Putch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_2
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SPEED
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_R1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Z
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Y
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_X
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>PUL_R1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, control.o(.text.PUL_R1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PUL_R1 &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[3b]"></a>PUL_R2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, control.o(.text.PUL_R2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PUL_R2 &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
</UL>

<P><STRONG><a name="[37]"></a>PUL_X</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(.text.PUL_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PUL_X &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_X
</UL>

<P><STRONG><a name="[38]"></a>PUL_Y</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(.text.PUL_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PUL_Y &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Y
</UL>

<P><STRONG><a name="[39]"></a>PUL_Z</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(.text.PUL_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PUL_Z &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Z
</UL>

<P><STRONG><a name="[36]"></a>Pause_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, control.o(.text.Pause_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Pause_all &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calib_xyzr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
</UL>

<P><STRONG><a name="[44]"></a>PetitModBus_TIMER_Initialise</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, petitmodbusport.o(.text.PetitModBus_TIMER_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = PetitModBus_TIMER_Initialise &rArr; Init_Timer0 &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPetitModbus
</UL>

<P><STRONG><a name="[72]"></a>PetitModBus_TimerValues</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, petitmodbusport.o(.text.PetitModBus_TimerValues))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>PetitModBus_UART_Initialise</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, petitmodbusport.o(.text.PetitModBus_UART_Initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PetitModBus_UART_Initialise &rArr; Init_UART0 &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART0
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPetitModbus
</UL>

<P><STRONG><a name="[62]"></a>PetitModBus_UART_Putch</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, petitmodbusport.o(.text.PetitModBus_UART_Putch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PetitModBus_UART_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_UART_String
</UL>

<P><STRONG><a name="[61]"></a>PetitModBus_UART_String</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, petitmodbusport.o(.text.PetitModBus_UART_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PetitModBus_UART_String &rArr; PetitModBus_UART_Putch
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_UART_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_DoSlaveTX
</UL>

<P><STRONG><a name="[3f]"></a>PetitSendMessage</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, petitmodbus.o(.text.PetitSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PetitSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMPetitodbusWriteMultipleRegisters
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusWriteSingleRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusReadHoldingRegisters
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusError
</UL>

<P><STRONG><a name="[66]"></a>Petit_CRC16</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, petitmodbus.o(.text.Petit_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Petit_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_TxRTU
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_RxRTU
</UL>

<P><STRONG><a name="[67]"></a>Petit_CheckRxTimeout</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, petitmodbus.o(.text.Petit_CheckRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Petit_CheckRxTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_RxRTU
</UL>

<P><STRONG><a name="[63]"></a>Petit_DoSlaveTX</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, petitmodbus.o(.text.Petit_DoSlaveTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Petit_DoSlaveTX &rArr; PetitModBus_UART_String &rArr; PetitModBus_UART_Putch
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_UART_String
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_TxRTU
</UL>

<P><STRONG><a name="[69]"></a>Petit_RxDataAvailable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, petitmodbus.o(.text.Petit_RxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Petit_RxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[64]"></a>Petit_RxRTU</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, petitmodbus.o(.text.Petit_RxRTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Petit_RxRTU &rArr; Petit_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPetitModbusBufferComplete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_CheckRxTimeout
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[68]"></a>Petit_TxRTU</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, petitmodbus.o(.text.Petit_TxRTU))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Petit_TxRTU &rArr; Petit_DoSlaveTX &rArr; PetitModBus_UART_String &rArr; PetitModBus_UART_Putch
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_DoSlaveTX
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPetitModbus
</UL>

<P><STRONG><a name="[5d]"></a>ProcessPetitModbus</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, petitmodbus.o(.text.ProcessPetitModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ProcessPetitModbus &rArr; Petit_TxRTU &rArr; Petit_DoSlaveTX &rArr; PetitModBus_UART_String &rArr; PetitModBus_UART_Putch
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_TxRTU
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_RxRTU
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Petit_RxDataAvailable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMPetitodbusWriteMultipleRegisters
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusWriteSingleRegister
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusReadHoldingRegisters
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandlePetitModbusError
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[73]"></a>ReceiveInterrupt</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, petitmodbusport.o(.text.ReceiveInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ReceiveInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>SETUP_SYSTEM</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, pc.o(.text.SETUP_SYSTEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SETUP_SYSTEM &rArr; ORGIN &rArr; PUL_Z &rArr; TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>SET_SPEED</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, control.o(.text.SET_SPEED))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[6b]"></a>SYS_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, sys_init.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>Signal_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, control.o(.text.Signal_1))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETUP_SYSTEM
</UL>

<P><STRONG><a name="[60]"></a>Signal_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control.o(.text.Signal_2))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
</UL>

<P><STRONG><a name="[34]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_nuc100series.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc100series.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[4b]"></a>TIMER_Open</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer3
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupt.o(.text.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PetitModBus_TimerValues
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, interrupt.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR1_IRQHandler &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, interrupt.o(.text.TMR2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR2_IRQHandler &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, interrupt.o(.text.TMR3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR3_IRQHandler &rArr; TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interrupt.o(.text.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART02_IRQHandler &rArr; ReceiveInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART_Open</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART0
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_SW
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SETUP_SYSTEM
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPetitModbus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_axits
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KEY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[30]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, system_nuc100series.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[24]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_init.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[6f]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_init.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[5b]"></a>TIMER_Start</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, control.o(.text.TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_R2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_R1
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Z
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_Y
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUL_X
</UL>

<P><STRONG><a name="[59]"></a>TIMER_Stop</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, control.o(.text.TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pause_all
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
</UL>

<P><STRONG><a name="[5a]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, control.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORGIN
</UL>

<P><STRONG><a name="[2f]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[31]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uart.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[4c]"></a>TIMER_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, init.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer3
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[48]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, init.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART0
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer3
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_KEY
</UL>

<P><STRONG><a name="[4d]"></a>TIMER_Start</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, init.o(.text.TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer0
</UL>

<P><STRONG><a name="[71]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interrupt.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>TIMER_Stop</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, interrupt.o(.text.TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCDEF_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
