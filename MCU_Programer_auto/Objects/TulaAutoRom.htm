<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TulaAutoRom.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TulaAutoRom.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Aug 26 14:55:53 2024
<BR><P>
<H3>Maximum Stack Usage =       1568 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[65]">_delay_ms</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">_delay_ms</a><BR>
 <LI><a href="#[71]">delay_sec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">protocol_execute_realtime</a><BR>
 <LI><a href="#[24]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1a]">CAN0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1b]">CAN1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[24]">Default_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[21]">I2S_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[20]">PDMA_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1e]">PS2_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[22]">PWRWU_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1c]">SC012_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_nuc100series.o(.text.SystemInit) referenced from startup_nuc100series.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from stepper.o(.text.TMR0_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from stepper.o(.text.TMR1_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from serial.o(.text.UART02_IRQHandler) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[1d]">USBD_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc100series.o(.text) referenced from startup_nuc100series.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc100series.o(.text)
 <LI><a href="#[26]">main</a> from main_1.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[116]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[117]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[118]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[119]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[11a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>labs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, slabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_fcmplt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmplt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dcmple</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dcmplt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dcmpge</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_base10
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_base10
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[11f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[120]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[121]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
</UL>

<P><STRONG><a name="[2f]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[38]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[37]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[46]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[47]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[48]"></a>_dfix_r</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dfixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dfix_r &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[123]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[124]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4a]"></a>CLK_EnablePLL</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[57]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[50]"></a>CLK_SetCoreClock</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[51]"></a>CLK_SetHCLK</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[59]"></a>CLK_SetModuleClock</STRONG> (Thumb, 280 bytes, Stack size 44 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4b]"></a>CLK_WaitClockReady</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[53]"></a>ControlOutput_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, controloutput.o(.text.ControlOutput_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ControlOutput_Init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>GPIO_SetMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlOutput_Init
</UL>

<P><STRONG><a name="[55]"></a>SYS_Init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sys_init.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_nuc100series.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc100series.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 152 bytes, Stack size 60 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[5a]"></a>TIMER_Open</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stepper.o(.text.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_IRQHandler &rArr; TIMER_ClearIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 776 bytes, Stack size 16 bytes, stepper.o(.text.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TMR1_IRQHandler &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearIntFlag
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 572 bytes, Stack size 32 bytes, serial.o(.text.UART02_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UART02_IRQHandler &rArr; mc_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_motion_override_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART_Open</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[68]"></a>convert_delta_vector_to_unit_vector</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, nuts_bolts.o(.text.convert_delta_vector_to_unit_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = convert_delta_vector_to_unit_vector &rArr; sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[d4]"></a>coolant_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, coolant_control.o(.text.coolant_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
</UL>

<P><STRONG><a name="[a5]"></a>coolant_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coolant_control.o(.text.coolant_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>coolant_set_state</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, coolant_control.o(.text.coolant_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
</UL>

<P><STRONG><a name="[bb]"></a>coolant_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coolant_control.o(.text.coolant_stop))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[6d]"></a>coolant_sync</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, coolant_control.o(.text.coolant_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = coolant_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[70]"></a>delay_ms</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nuts_bolts.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[71]"></a>delay_sec</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nuts_bolts.o(.text.delay_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + In Cycle
<LI>Call Chain = delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
</UL>

<P><STRONG><a name="[f7]"></a>eeprom_put_char</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom.o(.text.eeprom_put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eeprom_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[75]"></a>gc_execute_line</STRONG> (Thumb, 6932 bytes, Stack size 424 bytes, gcode.o(.text.gc_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[8d]"></a>gc_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gcode.o(.text.gc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_init &rArr; report_status_message &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>gc_sync_position</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gcode.o(.text.gc_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gc_sync_position &rArr; system_convert_array_steps_to_mpos &rArr; system_convert_axis_steps_to_mpos &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[bd]"></a>get_direction_pin_mask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, settings.o(.text.get_direction_pin_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_direction_pin_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
</UL>

<P><STRONG><a name="[96]"></a>get_step_pin_mask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, settings.o(.text.get_step_pin_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_step_pin_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
</UL>

<P><STRONG><a name="[80]"></a>hypot_f</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nuts_bolts.o(.text.hypot_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hypot_f &rArr; sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[81]"></a>jog_execute</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, jog.o(.text.jog_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = jog_execute &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[94]"></a>limit_value_by_axis_maximum</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, nuts_bolts.o(.text.limit_value_by_axis_maximum))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = limit_value_by_axis_maximum &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[b4]"></a>limits_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, limits.o(.text.limits_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[98]"></a>limits_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, limits.o(.text.limits_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[95]"></a>limits_go_home</STRONG> (Thumb, 1084 bytes, Stack size 136 bytes, limits.o(.text.limits_go_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = limits_go_home &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_pin_mask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
</UL>

<P><STRONG><a name="[a6]"></a>limits_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, limits.o(.text.limits_init))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[9d]"></a>limits_soft_check</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, limits.o(.text.limits_soft_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = limits_soft_check &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_travel_limits
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, main_1.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = main &rArr; protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_reset_read_buffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlOutput_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[88]"></a>mc_arc</STRONG> (Thumb, 1116 bytes, Stack size 296 bytes, motion_control.o(.text.mc_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[84]"></a>mc_dwell</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, motion_control.o(.text.mc_dwell))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = mc_dwell &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[b3]"></a>mc_homing_cycle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motion_control.o(.text.mc_homing_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mc_homing_cycle &rArr; limits_go_home &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_disable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[87]"></a>mc_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, motion_control.o(.text.mc_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_check_full_buffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[89]"></a>mc_probe_cycle</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, motion_control.o(.text.mc_probe_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mc_probe_cycle &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[61]"></a>mc_reset</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, motion_control.o(.text.mc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mc_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_alarm
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>plan_buffer_line</STRONG> (Thumb, 976 bytes, Stack size 200 bytes, planner.o(.text.plan_buffer_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = plan_buffer_line &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_direction_pin_mask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value_by_axis_maximum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[b5]"></a>plan_check_full_buffer</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, planner.o(.text.plan_check_full_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_check_full_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
</UL>

<P><STRONG><a name="[be]"></a>plan_compute_profile_nominal_speed</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, planner.o(.text.plan_compute_profile_nominal_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[c2]"></a>plan_cycle_reinitialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, planner.o(.text.plan_cycle_reinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = plan_cycle_reinitialize &rArr; planner_recalculate &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[c4]"></a>plan_discard_current_block</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, planner.o(.text.plan_discard_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = plan_discard_current_block &rArr; plan_next_block_index
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[eb]"></a>plan_get_block_buffer_available</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, planner.o(.text.plan_get_block_buffer_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_get_block_buffer_available
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[91]"></a>plan_get_current_block</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, planner.o(.text.plan_get_current_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_get_current_block
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[c5]"></a>plan_get_exec_block_exit_speed_sqr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, planner.o(.text.plan_get_exec_block_exit_speed_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = plan_get_exec_block_exit_speed_sqr &rArr; plan_next_block_index
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[ff]"></a>plan_get_system_motion_block</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, planner.o(.text.plan_get_system_motion_block))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[c0]"></a>plan_next_block_index</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, planner.o(.text.plan_next_block_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[a9]"></a>plan_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, planner.o(.text.plan_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = plan_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[c6]"></a>plan_reset_buffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, planner.o(.text.plan_reset_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
</UL>

<P><STRONG><a name="[aa]"></a>plan_sync_position</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, planner.o(.text.plan_sync_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_sync_position
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[c7]"></a>plan_update_velocity_profile_parameters</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, planner.o(.text.plan_update_velocity_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = plan_update_velocity_profile_parameters &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[c9]"></a>printFloat</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, print.o(.text.printFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
</UL>

<P><STRONG><a name="[cd]"></a>printFloat_CoordValue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, print.o(.text.printFloat_CoordValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
</UL>

<P><STRONG><a name="[ce]"></a>printFloat_RateValue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, print.o(.text.printFloat_RateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printFloat_RateValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[cf]"></a>printInteger</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, print.o(.text.printInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = printInteger &rArr; print_uint32_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_base10
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[d1]"></a>printPgmString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, print.o(.text.printPgmString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_init_message
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_M
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_G
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>

<P><STRONG><a name="[7b]"></a>printString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, print.o(.text.printString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_stop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
</UL>

<P><STRONG><a name="[d0]"></a>print_uint32_base10</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, print.o(.text.print_uint32_base10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_uint32_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printInteger
</UL>

<P><STRONG><a name="[d2]"></a>print_uint8_base10</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, print.o(.text.print_uint8_base10))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
</UL>

<P><STRONG><a name="[b7]"></a>probe_configure_invert_mask</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, probe.o(.text.probe_configure_invert_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = probe_configure_invert_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[b8]"></a>probe_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, probe.o(.text.probe_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_state_monitor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[a7]"></a>probe_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, probe.o(.text.probe_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>probe_state_monitor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, probe.o(.text.probe_state_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = probe_state_monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>protocol_auto_cycle_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(.text.protocol_auto_cycle_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = protocol_auto_cycle_start &rArr; plan_get_current_block
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[6e]"></a>protocol_buffer_synchronize</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, protocol.o(.text.protocol_buffer_synchronize))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_dwell
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_sync
</UL>

<P><STRONG><a name="[74]"></a>protocol_exec_rt_system</STRONG> (Thumb, 1752 bytes, Stack size 48 bytes, protocol.o(.text.protocol_exec_rt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = protocol_exec_rt_system &rArr; st_prep_buffer &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_accessory_overrides
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_motion_overrides
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_alarm
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_sync_position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_reset
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clear_exec_state_flag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_wake_up
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[73]"></a>protocol_execute_realtime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, protocol.o(.text.protocol_execute_realtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>

<P><STRONG><a name="[ac]"></a>protocol_main_loop</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, protocol.o(.text.protocol_main_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = protocol_main_loop &rArr; system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>read_float</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, nuts_bolts.o(.text.read_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = read_float &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[d6]"></a>report_alarm_message</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, report.o(.text.report_alarm_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_alarm_message &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[df]"></a>report_build_info</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, report.o(.text.report_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = report_build_info &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[e1]"></a>report_execute_startup_message</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, report.o(.text.report_execute_startup_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = report_execute_startup_message &rArr; report_status_message &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[8c]"></a>report_feedback_message</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, report.o(.text.report_feedback_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = report_feedback_message &rArr; report_util_feedback_line_feed &rArr; report_util_line_feed &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[e2]"></a>report_gcode_modes</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, report.o(.text.report_gcode_modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_gcode_modes &rArr; printFloat_RateValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_M
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_gcode_modes_G
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[e5]"></a>report_grbl_help</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, report.o(.text.report_grbl_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_grbl_help &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[e6]"></a>report_grbl_settings</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, report.o(.text.report_grbl_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = report_grbl_settings &rArr; report_util_float_setting &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[ab]"></a>report_init_message</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, report.o(.text.report_init_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_init_message &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>report_ngc_parameters</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, report.o(.text.report_ngc_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = report_ngc_parameters &rArr; report_probe_parameters &rArr; report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_coord_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[b9]"></a>report_probe_parameters</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, report.o(.text.report_probe_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = report_probe_parameters &rArr; report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[d8]"></a>report_realtime_status</STRONG> (Thumb, 1216 bytes, Stack size 128 bytes, report.o(.text.report_realtime_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = report_realtime_status &rArr; report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_RateValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_block_buffer_available
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_get_state
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_get_state
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printInteger
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_get_state
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_control_get_state
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_get_realtime_rate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_get_rx_buffer_available
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[f0]"></a>report_startup_line</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, report.o(.text.report_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = report_startup_line &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[8e]"></a>report_status_message</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, report.o(.text.report_status_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = report_status_message &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[f1]"></a>report_util_setting_prefix</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, report.o(.text.report_util_setting_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = report_util_setting_prefix &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
</UL>

<P><STRONG><a name="[ec]"></a>serial_get_rx_buffer_available</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, serial.o(.text.serial_get_rx_buffer_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_get_rx_buffer_available
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[9f]"></a>serial_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, serial.o(.text.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = serial_init &rArr; UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>serial_read</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, serial.o(.text.serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[a3]"></a>serial_reset_read_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial.o(.text.serial_reset_read_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>serial_write</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, serial.o(.text.serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint32_base10
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printInteger
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_axis_values
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>

<P><STRONG><a name="[a0]"></a>settings_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, settings.o(.text.settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>settings_read_build_info</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, settings.o(.text.settings_read_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = settings_read_build_info &rArr; printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[7d]"></a>settings_read_coord_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, settings.o(.text.settings_read_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_read_coord_data
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[104]"></a>settings_read_startup_line</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, settings.o(.text.settings_read_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = settings_read_startup_line
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
</UL>

<P><STRONG><a name="[f5]"></a>settings_restore</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, settings.o(.text.settings_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = settings_restore &rArr; settings_write_coord_data &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_write_coord_data
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_put_char
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[f8]"></a>settings_store_build_info</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, settings.o(.text.settings_store_build_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = settings_store_build_info &rArr; printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[f9]"></a>settings_store_global_setting</STRONG> (Thumb, 984 bytes, Stack size 40 bytes, settings.o(.text.settings_store_global_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = settings_store_global_setting &rArr; system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;probe_configure_invert_mask
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_flag_wco_change
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_global_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[fb]"></a>settings_store_startup_line</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, settings.o(.text.settings_store_startup_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = settings_store_startup_line &rArr; printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
</UL>

<P><STRONG><a name="[86]"></a>settings_write_coord_data</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, settings.o(.text.settings_write_coord_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = settings_write_coord_data &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[a8]"></a>sleep_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.text.sleep_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>spindle_compute_pwm_value</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, spindle_control.o(.text.spindle_compute_pwm_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = spindle_compute_pwm_value &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[ef]"></a>spindle_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spindle_control.o(.text.spindle_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[a4]"></a>spindle_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spindle_control.o(.text.spindle_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[5d]"></a>spindle_set_speed</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, spindle_control.o(.text.spindle_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spindle_set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>spindle_set_state</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spindle_control.o(.text.spindle_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spindle_set_state &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_sync
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[ba]"></a>spindle_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spindle_control.o(.text.spindle_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spindle_stop &rArr; printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
</UL>

<P><STRONG><a name="[83]"></a>spindle_sync</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spindle_control.o(.text.spindle_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_line
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[fa]"></a>st_generate_step_dir_invert_masks</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stepper.o(.text.st_generate_step_dir_invert_masks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_generate_step_dir_invert_masks &rArr; get_direction_pin_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_direction_pin_mask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_pin_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[ed]"></a>st_get_realtime_rate</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stepper.o(.text.st_get_realtime_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = st_get_realtime_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
</UL>

<P><STRONG><a name="[5e]"></a>st_go_idle</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stepper.o(.text.st_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>st_prep_buffer</STRONG> (Thumb, 2888 bytes, Stack size 384 bytes, stepper.o(.text.st_prep_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = st_prep_buffer &rArr; plan_compute_profile_nominal_speed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_compute_profile_nominal_speed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_exec_block_exit_speed_sqr
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_system_motion_block
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_discard_current_block
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_next_block_index
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[9b]"></a>st_reset</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stepper.o(.text.st_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st_reset &rArr; st_go_idle &rArr; delay_ms &rArr; _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_generate_step_dir_invert_masks
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[c3]"></a>st_update_plan_block_parameters</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stepper.o(.text.st_update_plan_block_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st_update_plan_block_parameters &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[93]"></a>st_wake_up</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stepper.o(.text.st_wake_up))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[a1]"></a>stepper_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stepper.o(.text.stepper_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = stepper_init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>system_check_safety_door_ajar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(.text.system_check_safety_door_ajar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_check_safety_door_ajar &rArr; system_control_get_state
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_control_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[90]"></a>system_check_travel_limits</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, system.o(.text.system_check_travel_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = system_check_travel_limits
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jog_execute
</UL>

<P><STRONG><a name="[da]"></a>system_clear_exec_accessory_overrides</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_accessory_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[d7]"></a>system_clear_exec_alarm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[d9]"></a>system_clear_exec_motion_overrides</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system.o(.text.system_clear_exec_motion_overrides))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
</UL>

<P><STRONG><a name="[9a]"></a>system_clear_exec_state_flag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system.o(.text.system_clear_exec_state_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_clear_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[ee]"></a>system_control_get_state</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, system.o(.text.system_control_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_control_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
</UL>

<P><STRONG><a name="[8f]"></a>system_convert_array_steps_to_mpos</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(.text.system_convert_array_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = system_convert_array_steps_to_mpos &rArr; system_convert_axis_steps_to_mpos &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_axis_steps_to_mpos
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_sync_position
</UL>

<P><STRONG><a name="[103]"></a>system_convert_axis_steps_to_mpos</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, system.o(.text.system_convert_axis_steps_to_mpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = system_convert_axis_steps_to_mpos &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_convert_array_steps_to_mpos
</UL>

<P><STRONG><a name="[dd]"></a>system_execute_line</STRONG> (Thumb, 1396 bytes, Stack size 48 bytes, system.o(.text.system_execute_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = system_execute_line &rArr; system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_startup
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_homing_cycle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_float
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_build_info
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_build_info
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_startup_line
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_help
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[db]"></a>system_execute_startup</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, system.o(.text.system_execute_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = system_execute_startup &rArr; gc_execute_line &rArr; mc_arc &rArr; mc_line &rArr; spindle_sync &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_read_startup_line
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_execute_startup_message
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_main_loop
</UL>

<P><STRONG><a name="[85]"></a>system_flag_wco_change</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system.o(.text.system_flag_wco_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = system_flag_wco_change &rArr; protocol_buffer_synchronize &rArr; protocol_execute_realtime &rArr; protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_buffer_synchronize
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>

<P><STRONG><a name="[a2]"></a>system_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(.text.system_init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>system_set_exec_accessory_override_flag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system.o(.text.system_set_exec_accessory_override_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_set_exec_accessory_override_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>system_set_exec_alarm</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, system.o(.text.system_set_exec_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_set_exec_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
</UL>

<P><STRONG><a name="[62]"></a>system_set_exec_motion_override_flag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system.o(.text.system_set_exec_motion_override_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_set_exec_motion_override_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>system_set_exec_state_flag</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system.o(.text.system_set_exec_state_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = system_set_exec_state_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_suspend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_auto_cycle_start
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_soft_check
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_probe_cycle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART02_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>write_global_settings</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, settings.o(.text.write_global_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_global_settings &rArr; printString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printString
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_restore
</UL>

<P><STRONG><a name="[45]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[106]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[10b]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[105]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[108]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[109]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[10a]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[10d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[10e]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[10f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[10c]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[126]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[112]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lround
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[110]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[ad]"></a>atan2</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[72]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>

<P><STRONG><a name="[b1]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[b0]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_compute_pwm_value
</UL>

<P><STRONG><a name="[9c]"></a>lround</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lround.o(i.lround))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lround &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix_r
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
</UL>

<P><STRONG><a name="[7a]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[b2]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
</UL>

<P><STRONG><a name="[6c]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_delta_vector_to_unit_vector
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limits_go_home
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_arc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hypot_f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
</UL>

<P><STRONG><a name="[79]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trunc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_execute_line
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute_line
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_store_global_setting
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4e]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, system_nuc100series.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[24]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc100series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc100series.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys_init.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4d]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[4f]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, uart.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[9e]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main_1.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>_delay_ms</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, nuts_bolts.o(.text._delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = _delay_ms &rArr;  _delay_ms (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[bf]"></a>plan_compute_profile_parameters</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, planner.o(.text.plan_compute_profile_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plan_compute_profile_parameters &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_update_velocity_profile_parameters
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[c1]"></a>planner_recalculate</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, planner.o(.text.planner_recalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = planner_recalculate &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_update_plan_block_parameters
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_next_block_index
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_prev_block_index
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_cycle_reinitialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_buffer_line
</UL>

<P><STRONG><a name="[c8]"></a>plan_prev_block_index</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, planner.o(.text.plan_prev_block_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = plan_prev_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;planner_recalculate
</UL>

<P><STRONG><a name="[d3]"></a>protocol_exec_rt_suspend</STRONG> (Thumb, 676 bytes, Stack size 40 bytes, protocol.o(.text.protocol_exec_rt_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = protocol_exec_rt_suspend &rArr; delay_sec &rArr;  protocol_execute_realtime (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_accessory_override_flag
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_check_safety_door_ajar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_exec_rt_system
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_go_idle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_get_current_block
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spindle_set_state
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_set_exec_state_flag
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_set_state
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coolant_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_execute_realtime
</UL>

<P><STRONG><a name="[de]"></a>report_util_line_feed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, report.o(.text.report_util_line_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_util_line_feed &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_alarm_message
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_status_message
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_startup_line
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_float_setting
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_uint8_setting
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_feedback_line_feed
</UL>

<P><STRONG><a name="[e0]"></a>report_util_feedback_line_feed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, report.o(.text.report_util_feedback_line_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = report_util_feedback_line_feed &rArr; report_util_line_feed &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_feedback_message
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_build_info
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[e7]"></a>report_util_uint8_setting</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, report.o(.text.report_util_uint8_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = report_util_uint8_setting &rArr; report_util_setting_prefix &rArr; print_uint8_base10 &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_uint8_base10
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>

<P><STRONG><a name="[e8]"></a>report_util_float_setting</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, report.o(.text.report_util_float_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = report_util_float_setting &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_setting_prefix
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_util_line_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_grbl_settings
</UL>

<P><STRONG><a name="[ea]"></a>report_util_axis_values</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, report.o(.text.report_util_axis_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = report_util_axis_values &rArr; printFloat_CoordValue &rArr; printFloat &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFloat_CoordValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_realtime_status
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_probe_parameters
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_ngc_parameters
</UL>

<P><STRONG><a name="[e3]"></a>report_util_gcode_modes_G</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, report.o(.text.report_util_gcode_modes_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_util_gcode_modes_G &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[e4]"></a>report_util_gcode_modes_M</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, report.o(.text.report_util_gcode_modes_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = report_util_gcode_modes_M &rArr; printPgmString &rArr; serial_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printPgmString
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gcode_modes
</UL>

<P><STRONG><a name="[f2]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, serial.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[5c]"></a>TIMER_ClearIntFlag</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stepper.o(.text.TIMER_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>TIMER_EnableInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stepper.o(.text.TIMER_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[102]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stepper.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_init
</UL>

<P><STRONG><a name="[100]"></a>st_next_block_index</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stepper.o(.text.st_next_block_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_next_block_index
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_prep_buffer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
